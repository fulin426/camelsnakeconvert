{"version":3,"sources":["components/inputForm.js","components/navBar.js","components/instructions.js","components/App.js","index.js"],"names":["inputForm","props","react_default","a","createElement","className","htmlFor","id","rows","value","snake_case","onChange","convertToCamel","camelCase","convertToSnake","navBar","instructions","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","event","target","split","result","i","length","push","slice","toUpperCase","join","setState","toLowerCase","concat","_this2","components_navBar","components_inputForm","e","components_instructions","Component","ReactDOM","render","components_App","document","querySelector"],"mappings":"4LAmCeA,SAjCG,SAACC,GACjB,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,+BAAf,cACAJ,EAAAC,EAAAC,cAAA,YACEC,UAAU,eACVE,GAAG,8BACHC,KAAK,IACLC,MAAOR,EAAMS,WACbC,SAAUV,EAAMW,mBAItBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,+BAAf,aACAJ,EAAAC,EAAAC,cAAA,YACEC,UAAU,eACVE,GAAG,8BACHC,KAAK,IACLC,MAAOR,EAAMY,UACbF,SAAUV,EAAMa,uBCZbC,EAZA,WACb,OACAb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACbH,EAAAC,EAAAC,cAAA,sDCSSY,EAbM,WACnB,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,iFC8DSa,cA5Db,SAAAA,EAAYhB,GAAM,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMpB,KACDwB,MAAQ,CACXf,WAAY,GACZG,UAAW,IAJGK,8EAQHQ,GAMb,IALA,IAAMhB,EAAagB,EAAMC,OAAOlB,MAE5BmB,EAAQlB,EAAWkB,MAAM,KAEzBC,EAAS,CAACD,EAAM,IACXE,EAAE,EAAGA,EAAEF,EAAMG,OAAQD,IAE5BD,EAAOG,KAAKJ,EAAME,GAAGG,MAAM,EAAE,GAAGC,cAAgBN,EAAME,GAAGG,MAAM,IAEjE,IAAMpB,EAAYgB,EAAOM,KAAK,IAC9Bd,KAAKe,SAAS,CACZ1B,WAAYA,EACZG,UAAWA,2CAIAa,GAKb,IAJA,IAAMb,EAAYa,EAAMC,OAAOlB,MAE3BmB,EAAQf,EAAUe,MAAM,IACxBC,EAAS,GACJC,EAAE,EAAGA,EAAEF,EAAMG,OAAQD,IACxBF,EAAME,KAAOF,EAAME,GAAGO,cACxBR,EAAOG,KAAP,IAAAM,OAAgBV,EAAME,GAAGO,gBAEzBR,EAAOG,KAAKJ,EAAME,IAGtB,IAAMpB,EAAamB,EAAOM,KAAK,IAC/Bd,KAAKe,SAAS,CACZ1B,WAAYA,EACZG,UAAWA,qCAIN,IAAA0B,EAAAlB,KACP,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACqC,EAAD,CACE7B,eAAgB,SAAA8B,GAAC,OAAIH,EAAK3B,eAAe8B,IACzC5B,eAAgB,SAAA4B,GAAC,OAAIH,EAAKzB,eAAe4B,IACzChC,WAAYW,KAAKI,MAAMf,WACvBG,UAAWQ,KAAKI,MAAMZ,YAExBX,EAAAC,EAAAC,cAACuC,EAAD,cAvDUC,aCDlBC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,cAAc","file":"static/js/main.a7353826.chunk.js","sourcesContent":["import React from 'react';\n\nconst inputForm = (props) => {\n  return(\n  <div className=\"container\">\n    <div className=\"row\">\n      <div className=\"col\">\n        <div className=\"form-group\">\n          <label htmlFor=\"exampleFormControlTextarea1\">snake_case</label>\n          <textarea\n            className=\"form-control\"\n            id=\"exampleFormControlTextarea1\"\n            rows=\"5\"\n            value={props.snake_case}\n            onChange={props.convertToCamel}>\n            </textarea>\n        </div>\n      </div>\n      <div className=\"col\">\n        <div className=\"form-group\">\n          <label htmlFor=\"exampleFormControlTextarea1\">camelCase</label>\n          <textarea\n            className=\"form-control\"\n            id=\"exampleFormControlTextarea1\"\n            rows=\"5\"\n            value={props.camelCase}\n            onChange={props.convertToSnake}>\n          </textarea>\n        </div>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nexport default inputForm;\n","import React from 'react';\n\nconst navBar = () => {\n  return(\n  <div className=\"container\">\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <h2>\n        snake_case to camelCase or Vice Versa\n      </h2>\n    </nav>\n  </div>\n  );\n}\n\nexport default navBar;\n","import React from 'react';\n\nconst instructions = () => {\n  return(\n    <div className=\"container instructions\">\n      <p>\n        Type or paste in snake_case or camelCase in their respective boxes\n        {/* <span className=\"second-instruction\">\n          Multiple words can be input with a space inbetween or return\n        </span> */}\n      </p>\n    </div>\n  );\n}\n\nexport default instructions;\n","import React, { Component } from 'react';\nimport '../App.css';\nimport InputForm from './inputForm';\nimport NavBar from './navBar';\nimport Instructions from './instructions'\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      snake_case: '',\n      camelCase: '',\n    }\n  }\n\n  convertToCamel(event) {\n    const snake_case = event.target.value;\n    //convert value to camelCase\n    let split = snake_case.split('_');\n    //the first letter is not capitalized\n    let result = [split[0]];\n    for (let i=1; i<split.length; i++) {\n      //slice first letter then capitalize then add on rest of word\n      result.push(split[i].slice(0,1).toUpperCase() + split[i].slice(1));\n    }\n    const camelCase = result.join('');\n    this.setState({\n      snake_case: snake_case,\n      camelCase: camelCase\n    });\n  }\n\n  convertToSnake(event) {\n    const camelCase = event.target.value;\n    //convert value to snake_case\n    let split = camelCase.split('');\n    let result = [];\n    for (let i=0; i<split.length; i++) {\n      if (split[i] !== split[i].toLowerCase()) {\n        result.push(`_${split[i].toLowerCase()}`);\n      } else {\n        result.push(split[i]);\n      }\n    }\n    const snake_case = result.join('');\n    this.setState({\n      snake_case: snake_case,\n      camelCase: camelCase\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <NavBar />\n        <InputForm\n          convertToCamel={e => this.convertToCamel(e)}\n          convertToSnake={e => this.convertToSnake(e)}\n          snake_case={this.state.snake_case}\n          camelCase={this.state.camelCase}\n        />\n        <Instructions />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}